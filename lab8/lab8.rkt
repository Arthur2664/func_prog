#lang racket

(define (deriv pol)
  (if (not (null? (cdr pol)))
      (append (list (* (car pol)
                       (- (length pol) 1)))
              (deriv (cdr pol)))'()))

(define (print-pol pol)
  (when (not (null? pol))
    (when (not (= (car pol) 0))
      (begin (display "(") (display (car pol)) (display "*x^")
             (display (- (length pol) 1)) (display ")")
             (if (not (null? (cdr pol)))
                 (begin (display (if (not (= (cadr pol) 0))" + " ""))
                        (print-pol (cdr pol))) (newline))))))

(define polynomial (list -3 5 1 -7 -2 4))
(define d1 (deriv polynomial))
(define d2 (deriv d1))
(define d3 (deriv d2))
(display "Original equation:\n")
(print-pol polynomial)
(display "First derivative:\n")
(print-pol d1)
(display "Second derivative\n")
(print-pol d2)
(display "Third derivative\n")
(print-pol d3)